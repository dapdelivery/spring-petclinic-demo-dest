apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: spring-petclinic
  labels:
    app.kubernetes.io/part-of: petclinic-server
    apps.kubernetes.io/name: spring-petclinic
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/component: run
    carto.run/workload-name: spring-petclinic
spec:
  template:
    metadata:
      annotations:
        boot.spring.io/actuator: http://:8081/actuator
        boot.spring.io/version: 2.6.2
        conventions.apps.tanzu.vmware.com/applied-conventions: |-
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-graceful-shutdown
          spring-boot-convention/spring-boot-web
          spring-boot-convention/spring-boot-actuator
          spring-boot-convention/spring-boot-actuator-probes
          spring-boot-convention/service-intent-mysql
          spring-boot-convention/service-intent-postgres
          appliveview-sample/app-live-view-connector
          appliveview-sample/app-live-view-appflavours
          appliveview-sample/app-live-view-systemproperties
        developer.conventions/target-containers: workload
        kubectl.kubernetes.io/last-applied-configuration: |
          {"apiVersion":"carto.run/v1alpha1","kind":"Workload","metadata":{"annotations":{},"labels":{"app.kubernetes.io/part-of":"petclinic-server","apps.kubernetes.io/name":"spring-petclinic","apps.tanzu.vmware.com/workload-type":"web"},"name":"spring-petclinic","namespace":"my-apps"},"spec":{"env":[{"name":"SPRING_PROFILES_ACTIVE","value":"mysql"},{"name":"JAVA_TOOL_OPTIONS","value":"-Dspring.devtools.restart.enabled=true -Dspring.devtools.restart.poll-interval=2s -Dspring.devtools.restart.quiet-period=1s -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9005\n"}],"params":[{"name":"gitops_repository","value":"ssh://git@github.com/dapdelivery/spring-petclinic-demo-dest.git"},{"name":"gitops_ssh_secret","value":"git-ssh"}],"resources":{"limits":{"cpu":"4000m","memory":"1Gi"},"requests":{"cpu":"100m","memory":"1Gi"}},"serviceClaims":[{"name":"spring-petclinic-db","ref":{"apiVersion":"v1","kind":"Secret","name":"spring-petclinic-db"}}],"source":{"git":{"ref":{"branch":"main"},"url":"https://github.com/dapdelivery/spring-petclinic-19-03-2022-21-29-08-947653069.git"}}}}
        services.conventions.apps.tanzu.vmware.com/mysql: mysql-connector-java/8.0.27
        services.conventions.apps.tanzu.vmware.com/postgres: postgresql/42.3.1
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: petclinic-server
        apps.kubernetes.io/name: spring-petclinic
        apps.tanzu.vmware.com/workload-type: web
        carto.run/workload-name: spring-petclinic
        conventions.apps.tanzu.vmware.com/framework: spring-boot
        services.conventions.apps.tanzu.vmware.com/mysql: workload
        services.conventions.apps.tanzu.vmware.com/postgres: workload
        tanzu.app.live.view: "true"
        tanzu.app.live.view.application.actuator.port: "8081"
        tanzu.app.live.view.application.flavours: spring-boot
        tanzu.app.live.view.application.name: petclinic
    spec:
      containers:
      - env:
        - name: SPRING_PROFILES_ACTIVE
          value: mysql
        - name: JAVA_TOOL_OPTIONS
          value: |-
            -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9005
             -Dmanagement.endpoint.health.probes.add-additional-paths="true" -Dmanagement.endpoint.health.show-details=always -Dmanagement.endpoints.web.base-path="/actuator" -Dmanagement.endpoints.web.exposure.include=* -Dmanagement.health.probes.enabled="true" -Dmanagement.server.port="8081" -Dserver.port="8080" -Dserver.shutdown.grace-period="24s" -Dspring.devtools.restart.enabled="true" -Dspring.devtools.restart.poll-interval="2s" -Dspring.devtools.restart.quiet-period="1s"
        image: dev.registry.tanzu.vmware.com/tanzu-application-platform/ci-pipeline/apps-19-03-2022-21-29-08-947653069-19-03-2022-21-29-08-947653069/spring-petclinic-my-apps@sha256:fe2360bff7e2ef3506bb94cc7f6eccdc8de40109978034600612cb86884fb1f0
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
        resources:
          limits:
            cpu: "4"
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 1Gi
        securityContext:
          runAsUser: 1000
      serviceAccountName: default

